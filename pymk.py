#!/usr/bin/python3
from mkpy.utility import *

# This is how we can ser different compiler flags that will be selected by
# using a command line option (in this case --mode or -M). The last mode used
# will be persisted acrosss runs of the script so --mode can be ommited in
# later calls. Tab complete will work to complete --mode after -- is typed, and
# to complete the possible values for it that will proceed.
modes = {
        'debug': '-O0 -g -Wall',
        'profile_debug': '-O2 -g -pg -Wall',
        'release': '-O2 -g -DNDEBUG -Wall'
        }
mode = store('mode', get_cli_arg_opt('-M,--mode', modes.keys()), 'debug')
C_FLAGS = modes[mode]

# This function will be called if no argument is passed to pymk.py
def default ():
    target = store_get ('last_target', default='example_procedure')
    call_user_function(target)

# This example shows how to run a simple bash command, note how global
# variables get replaced automatically when using {<variable name>}.
def example_procedure ():
    ex ('echo calling example_procedure in mode: {mode}', echo=False)

    # After setting echo mode, all calls to ex() will only echo the command
    # that would have been called. This is a useful debug tool to see we are
    # creating the correct commands before we accidentally run broken commands
    # and cause unintended results.
    set_echo_mode ()
    ex ('gcc {C_FLAGS} -o test test.c')

# The following functions count_next() and count_start(), use the persistance
# functions to create an idiom where we have an increasing counter, that can be
# reset to 0 or set to a specific value. This is useful for example for
# iterating over files, for instance to review them after they were
# autogenerated.
def count_next ():
    i = store_get ('i', default=0)
    ex ('echo Using counter value: ' + str(i), echo=False)

    store ('i', i+1)

def count_start ():
    cli_counter = get_cli_arg_opt('--counter')
    val = 0
    if cli_counter != None:
        val = int(cli_counter)
    i = store ('i', val)
    ex ('echo Starting counter at: ' + str(i), echo=False)

if __name__ == "__main__":
    # Everything above this line will be executed for each TAB press.
    # If --get_completions is set, handle_tab_complete() calls exit().
    handle_tab_complete ()

    pymk_default()


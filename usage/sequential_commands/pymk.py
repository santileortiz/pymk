#!/usr/bin/python3
from mkpy.utility import *

# The following functions count_next() and count_start(), use the persistance
# functions to create an idiom where we have an increasing counter, that can be
# reset to 0 or set to a specific value. This is useful for example for
# iterating over files, for instance to review them after they were
# autogenerated.
def count_next ():
    i = store_get ('i', default=0)
    ex ('echo Using counter value: ' + str(i), echo=False)

    store ('i', i+1)

def count_start ():
    # Note the difference between using the default option in store() or
    # store_get() and in get_cli_arg_opt(). In the store functions the default
    # is only used if the variable is undefined in the cache, get_cli_arg_opt()
    # will return the default whenever the option is not present in argv.
    i = store ('i', int(get_cli_arg_opt('--counter', default = 0)))
    ex ('echo Starting counter at: ' + str(i), echo=False)

if __name__ == "__main__":
    # Everything above this line will be executed for each TAB press.
    # If --get_completions is set, handle_tab_complete() calls exit().
    handle_tab_complete ()

    pymk_default()

